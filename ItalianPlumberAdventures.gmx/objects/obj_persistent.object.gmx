<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hello Mario Engine's persistent object

//How the screen is fading
//0: From black, 1: To black
mode = 0

//How much the screen is faded
done = 0

//Screenshot of the game, if it exists
back = -1

//Message to display to the screen
message = ""

//Whether to show the FPS
showfps = 0

//Declare global variables
scr_init_globals()

//Item that is being carried between rooms
global.carrieditem = noone

//The sprite used by an item carried between rooms
global.carriedsprite = noone

//Whether Mario should hold/carry an object
global.shallihold = 0

//The level music
global.levelmusic = snd_gameover

//Data structure for storing the state of the world map
global.worldmap = ds_map_create()

//Data structure for storing the state of the card minigame
global.cardgame = ds_map_create()

//Font for dialog boxes
global.messagefont = font_add_sprite_ext(spr_messagefont,'!"'+"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",0,0)

//Font for small letters
global.font = font_add_sprite_ext(spr_spritefont,'!"'+"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",1,-1)

//Font for white digits
global.wdigits = font_add_sprite_ext(spr_numbers,"0123456789",0,0)

//Font for gold digits
global.gdigits = font_add_sprite_ext(spr_numbersgold,"0123456789",0,0)

//Make the x key do everything the shift key does
keyboard_set_map(ord('X'),vk_shift)

//Make the z key do everything the control key does
keyboard_set_map(ord('Z'),vk_control)

//Handle gamepad support
gamepad = gamepad_is_connected(0)

//Gamepad left stick
leftstick[0] = 0
leftstick[1] = 0
leftstick[2] = 0
leftstick[3] = 0

//Set the epsilon value for floating point numbers
math_set_epsilon(0.00001)

//Disable application surface automatic drawing
application_surface_draw_enable(0)

//Some variables used
totalace = 0
catchedace = 0
global.gamepadindex = 0
global.gamepadjump = 0
global.gamepadrun = 0
global.gamepadselect = 0
global.gamepadstart = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Because GM: Studio is buggy, delay applying settings

//Apply fullscreen
window_set_fullscreen(true)

//Apply filtering and VSync
event_user(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the title screen
room_goto(rm_title)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the message
message = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window
window_center()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate everything
instance_deactivate_all(1)

//Make sure Mario Start! is active
instance_activate_object(obj_mariostart)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop fading to black

//Set mode to fade from black
mode = 0

//If Mario Start! does not exist
if not instance_exists(obj_mariostart)
{

    //Begin fading from black
    done = 0

    //Activate everything
    instance_activate_all()

}

//Delete the screenshot
if background_exists(back){
    background_delete(back)  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gamepad support
//Up on left stick
   if leftstick[0] = 0
   and gamepad_axis_value(global.gamepadindex,gp_axislv) &lt;= -0.5
   {
       leftstick[0] = 1
       keyboard_key_press(vk_up)
   }
   else if leftstick[0] = 1
   and gamepad_axis_value(global.gamepadindex,gp_axislv) &gt; -0.5
   {
       leftstick[0] = 0
       keyboard_key_release(vk_up)
   }
    //Down on left stick
   if leftstick[1] = 0
   and gamepad_axis_value(global.gamepadindex,gp_axislv) &gt;= 0.5
   {
       leftstick[1] = 1
       keyboard_key_press(vk_down)
   }
   else if leftstick[1] = 1
   and gamepad_axis_value(global.gamepadindex,gp_axislv) &lt; 0.5
   {
       leftstick[1] = 0
       keyboard_key_release(vk_down)
   }
    //Left on left stick
   if leftstick[2] = 0
   and gamepad_axis_value(global.gamepadindex,gp_axislh) &lt;= -0.5
   {
       leftstick[2] = 1
       keyboard_key_press(vk_left)
   }
   else if leftstick[2] = 1
   and gamepad_axis_value(global.gamepadindex,gp_axislh) &gt; -0.5
   {
       leftstick[2] = 0
       keyboard_key_release(vk_left)
   }
    //Right on left stick
   if leftstick[3] = 0
   and gamepad_axis_value(global.gamepadindex,gp_axislh) &gt;= 0.5
   {
       leftstick[3] = 1
       keyboard_key_press(vk_right)
   }
   else if leftstick[3] = 1
   and gamepad_axis_value(global.gamepadindex,gp_axislh) &lt; 0.5
   {
       leftstick[3] = 0
       keyboard_key_release(vk_right)
   }
    //Up on d-pad
   if gamepad_button_check_pressed(global.gamepadindex,gp_padu)
       keyboard_key_press(vk_up)
   else if gamepad_button_check_released(global.gamepadindex,gp_padu)
       keyboard_key_release(vk_up)
    //Down on d-pad
   if gamepad_button_check_pressed(global.gamepadindex,gp_padd)
       keyboard_key_press(vk_down)
   else if gamepad_button_check_released(global.gamepadindex,gp_padd)
       keyboard_key_release(vk_down)
    //Left on d-pad
   if gamepad_button_check_pressed(global.gamepadindex,gp_padl)
        keyboard_key_press(vk_left)
   else if gamepad_button_check_released(global.gamepadindex,gp_padl)
       keyboard_key_release(vk_left)
    //Right on d-pad
   if gamepad_button_check_pressed(global.gamepadindex,gp_padr)
        keyboard_key_press(vk_right)
   else if gamepad_button_check_released(global.gamepadindex,gp_padr)
       keyboard_key_release(vk_right)
    //A button
  if gamepad_button_check_pressed(global.gamepadindex,global.gamepadjump)
        keyboard_key_press(vk_shift)
   else if gamepad_button_check_released(global.gamepadindex,global.gamepadjump)
       keyboard_key_release(vk_shift)

    //B button
/*    
    if gamepad_button_check_pressed(global.gamepadindex,gp_face3)
        keyboard_key_press(vk_control)
    else if gamepad_button_check_released(global.gamepadindex,gp_face3)
        keyboard_key_release(vk_control)
*/
        
    //X button
    if gamepad_button_check_pressed(global.gamepadindex,global.gamepadrun)
        keyboard_key_press(vk_control)
    else if gamepad_button_check_released(global.gamepadindex,global.gamepadrun)
        keyboard_key_release(vk_control)

    //Start button
    if gamepad_button_check_pressed(global.gamepadindex,global.gamepadstart)
        keyboard_key_press(vk_enter)
    else if gamepad_button_check_released(global.gamepadindex,global.gamepadstart)
        keyboard_key_release(vk_enter)

    //Select button
    if gamepad_button_check_pressed(global.gamepadindex,global.gamepadselect)
        keyboard_key_press(vk_space)
    else if gamepad_button_check_released(global.gamepadindex,global.gamepadselect)
        keyboard_key_release(vk_space)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the hotkeys

//Quit the game when ALT+F4 is pressed
if keyboard_check_pressed(vk_f4)
    game_end()

//Restart the game when ALT+R is pressed
else if keyboard_check_pressed(ord('R'))
{
    audio_stop_all()
    scr_init_globals()
    room_goto(rm_title)
}

//Fullscreen (Handled by GM: Studio)
else if keyboard_check_pressed(vk_enter)
{
    fullscreen = !fullscreen
    if fullscreen
        message = "FULLSCREEN ON"
    else
        message = "FULLSCREEN OFF"
    event_user(1)
}

//Toggles VSync
else if keyboard_check_pressed(ord('V'))
{
    vsync = !vsync
    if vsync
        message = "VSYNC ON"
    else
        message = "VSYNC OFF"
    event_user(1)
}

//Toggles Gamepad
else if keyboard_check_pressed(ord('G'))
{
    gamepad = !gamepad
    if gamepad
        message = "GAMEPAD ON"
    else
        message = "GAMEPAD OFF"
    event_user(1)
}

//Toggle FPS display
else if keyboard_check_pressed(ord('F'))
{
    showfps = !showfps
}

//Turn off filtering if ALT+1 is pressed
else if keyboard_check_pressed(ord('1'))
{
    filter = 0
    message = "NO FILTERING"
    event_user(1)
}

//Turn on HQ2X filtering if ALT+2 is pressed
else if keyboard_check_pressed(ord('2'))
{
    filter = 1
    message = "HQ2X FILTERING"
    event_user(1)
}

//Turn on HQ4X filtering if ALT+3 is pressed
else if keyboard_check_pressed(ord('3'))
{
    filter = 2
    message = "HQ4X FILTERING"
    event_user(1)
}

//Show hotkey help
else
{
    /*
    if alarm[3] &lt; 1
        message = "ALT+R: RESTART GAME#ALT+ENTER: FULL SCREEN#ALT+F4: QUIT GAME#ALT+1: TURN OFF FILTERING#ALT+2: TURN ON HQ2X FILTERING#ALT+3: TURN ON HQ4X FILTERING#ALT+V: VSYNC#ALT+F: FPS DISPLAY#ALT+G: GAMEPAD TOGGLE";
    exit
    */
}

//Reset the message
alarm[3] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update acecoins stats just before pause
currentace = 0
catchedace = 0
if (totalace &gt; 0){
    with (obj_acecoin){
        other.currentace++
        if sprite_index = spr_acecoinok then other.catchedace++
    }
    var diff = totalace - currentace
    catchedace = catchedace + diff
}else{
    catchedace = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End of game 
scr_save_settings()
game_end()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete on screen controls
for(var i = 0; i &lt; array_length_1d(mobile_keys); i++)
    virtual_key_delete(mobile_keys[i])
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up on screen controls

//Temporary variable
var s

//Normal
if filter = 0
    s = 1

//HQ2X
else if filter = 1
    s = 2

//HQ4X
else if filter = 2
    s = 4

//Up
mobile_keys[0] = virtual_key_add(34*s,118*s,32*s,32*s,vk_up)

//Down
mobile_keys[1] = virtual_key_add(34*s,182*s,32*s,32*s,vk_down)

//Left
mobile_keys[2] = virtual_key_add(2*s,150*s,32*s,32*s,vk_left)

//Right
mobile_keys[3] = virtual_key_add(66*s,150*s,32*s,32*s,vk_right)

//Jump
mobile_keys[4] = virtual_key_add(350*s,150*s,32*s,32*s,vk_shift)

//Run
mobile_keys[5] = virtual_key_add(310*s,150*s,32*s,32*s,vk_control)

//Pause
mobile_keys[6] = virtual_key_add(350*s,2*s,32*s,32*s,vk_enter)

//Inventory
mobile_keys[7] = virtual_key_add(2*s,2*s,32*s,32*s,vk_space)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the screen to be displayed

//Temporary variable
var s

//Normal
if filter = 0
    s = 1

//HQ2X
else if filter = 1
    s = 2

//HQ4X
else if filter = 2
    s = 4

//Reset display
display_reset(0,vsync)

//Set up the window
window_set_size(view_wview[0]*s,view_hview[0]*s)

//Set up the display
display_set_gui_size(view_wview[0]*s,view_hview[0]*s)

//Center the window
alarm[2] = 1

//Reset mobile controls
if os_type = os_android or os_type = os_ios
{
    event_user(3)
    event_user(2)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black

//If this event was called manually
if mode = 0
{

    //Take a screenshot
    back = background_create_from_surface(application_surface,0,0,view_wview[0],view_hview[0],0,0)

    //Deactivate everything
    instance_deactivate_all(1)

}

//Start fading
done = 0

//To black
mode = 1

//Make sure it stops when its done
alarm[0] = 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to fade to black

//Fade to black
mode = 1

//Take a screenshot
back = background_create_from_surface(application_surface,0,0,view_wview[0],view_hview[0],0,0)

//Set alarm to execute when the next room starts
alarm[1] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black, unless you just opened up the game
if mode = 1
    event_user(0)

//Set up on screen controls
if os_type = os_android or os_type = os_ios
    event_user(2)
    
//Count all acecoins
totalace = instance_number(obj_acecoin)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_load_settings()

//Apply loaded settings
alarm[5] = 1

//Play the coin sound at the splash screen
audio_play_sound(snd_coin,0,0)

//Go to the title screen
alarm[4] = 200
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the application surface, filtering, and fading
draw_enable_alphablend(0)

//No Filter
if filter = 0
    draw_surface(application_surface,0,0)

//HQ2X Filtering
else if filter = 1
{
    shader_set(sha_hq2x)
    draw_surface_stretched(application_surface,0,0,view_wview[0]*2,view_hview[0]*2)
    shader_reset()
}

//HQ4X Filtering
else if filter = 2
{
    shader_set(sha_hq4x)
    draw_surface_stretched(application_surface,0,0,view_wview[0]*4,view_hview[0]*4)
    shader_reset()
}

draw_enable_alphablend(1)

//Fades the screen to and from black
if done &lt; 1
{

    //Increment fading
    done += 1/30

    //Fade from black
    if mode = 0
        draw_set_alpha(1-done)

    //Fade to black
    else
        draw_set_alpha(done)

    //Draw the fade
    draw_set_color(c_black)
    draw_rectangle(0,0,5000,5000,0)
    draw_set_alpha(1)
    draw_set_color(c_white)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws the screenshot shown when fading to black
if background_exists(back)
{
    draw_enable_alphablend(0)
    draw_background(back,view_xview[0],view_yview[0])
    draw_enable_alphablend(1)
}

//Display messages
draw_set_font(global.font)
draw_text(view_xview[0],view_yview[0],message)

//Show FPS
if showfps
{
    draw_set_halign(fa_right)
    draw_text(view_xview[0]+view_wview[0]-2,view_yview[0]+206,"FPS: "+string(fps)+" MAX FPS: "+string(fps_real))
    draw_set_halign(fa_left)
}

//Draw on screen controls
if (os_type = os_android or os_type = os_ios)
and (instance_exists(obj_levelmanager) or instance_exists(obj_mapmario) or instance_exists(obj_titlescreen))
{

    //Set the font
    draw_set_font(global.font)

    //Center the text
    draw_set_halign(fa_center)

    //Set the aplha
    draw_set_alpha(0.6)

    //Up
    draw_rectangle(view_xview[0]+34,view_yview[0]+118,view_xview[0]+34+31,view_yview[0]+118+31,0)

    //Down
    draw_rectangle(view_xview[0]+34,view_yview[0]+182,view_xview[0]+34+31,view_yview[0]+182+31,0)

    //Left
    draw_rectangle(view_xview[0]+2,view_yview[0]+150,view_xview[0]+2+31,view_yview[0]+150+31,0)

    //Right
    draw_rectangle(view_xview[0]+66,view_yview[0]+150,view_xview[0]+66+31,view_yview[0]+150+31,0)

    //Jump
    draw_rectangle(view_xview[0]+350,view_yview[0]+150,view_xview[0]+350+31,view_yview[0]+150+31,0)
    draw_text(view_xview[0]+350+15,view_yview[0]+150+12,"A")

    //Run
    draw_rectangle(view_xview[0]+310,view_yview[0]+150,view_xview[0]+310+31,view_yview[0]+150+31,0)
    draw_text(view_xview[0]+310+15,view_yview[0]+150+12,"B")

    //Pause
    draw_rectangle(view_xview[0]+350,view_yview[0]+2,view_xview[0]+350+31,view_yview[0]+2+31,0)
    draw_text(view_xview[0]+350+15,view_yview[0]+2+12,"+")

    //Inventory
    draw_rectangle(view_xview[0]+2,view_yview[0]+2,view_xview[0]+2+31,view_yview[0]+2+31,0)
    draw_text(view_xview[0]+2+15,view_yview[0]+2+12,"-")

    //Reset text alignment
    draw_set_halign(fa_left)

    //Reset alpha
    draw_set_alpha(1)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset hotkey help
if alarm[3] &lt; 1
    message = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
