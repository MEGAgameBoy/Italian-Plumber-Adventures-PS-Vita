<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_goal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>spr_bigmask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario on the flagpole

//Stop the music and time
with obj_levelmanager
{
    event_user(3)
    alarm[2] = 0
}

//Remember whether a level or secret level was cleared
if instance_exists(obj_flagpole_secret)
    global.clear = 2
else
    global.clear = 1

//Forget checkpoints
global.checkpoint = noone

//Goal Mario's state
ready = 0

//Do not animate
image_speed = 0

//Use the goal sprite
sprite_index = scr_mariogoal()

//Use small mask for small Mario
if global.powerup = cs_small
    mask_index = spr_smallmask

//Move down
vspeed = 1.5

//Start walking after reaching the bottom
alarm[0] = 130

//Play the flagpole sound
audio_play_sound(snd_flagpole,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the world map after the music is done playing
if audio_is_playing(snd_flagsong)
    alarm[3] = 1
else
    scr_return()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is no time left
if global.timer = 0
{

    //Play the count end sound
    audio_play_sound(snd_countend,0,0)

    //Return to the world map
    alarm[3] = 1

}

//Otherwise
else
{

    //If there is more than 4 seconds left
    if global.timer &gt; 4
    {

        //Add 500 to the score
        score += 500

        //Subtract 5 seconds from the time
        global.timer -= 5

    }

    //Otherwise
    else
    {

        //Add 100 to the score
        score += 100

        //Decrement the time
        global.timer--

    }

    //Play the count sound
    audio_play_sound(snd_count,0,0)

    //Continue counting down
    alarm[2] = 4

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade into the castle
if image_alpha &gt; 0
{
    image_alpha -= 0.05
    alarm[1] = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start walking to the goal castle

//Physics state
ready = 2

//Play the flagpole music
audio_play_sound(snd_flagsong,1,0)

//Mario shouts in excitement
audio_play_sound(snd_yahoo,0,0)

//Face right
image_xscale = 1

//Jump rightwards
hspeed = 1
vspeed = -3

//Animate
image_speed = 0.15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goal Mario logic

//Destroy all enemies
with obj_enemyparent
{
    instance_create(x,y,obj_smoke)
    instance_destroy()
}

//When in the physics or countdown state
if ready = 2
or ready = 3
{

    //Prevent physics parent from destroying (Hack)
    if bbox_top &gt; room_height
    {
        if ready = 2
            hspeed = -1
        y = room_height-32
        visible = 0
    }

    //Default event
    event_inherited()

    //If Mario reached a wall or fell out of the room when in the physics state
    if ready = 2
    and hspeed &lt; 0
    {

        //Countdown state
        ready = 3

        //Begin countdown state
        event_user(15)

        //Stop walking
        hspeed = 0

    }

    //When on the ground, use walking sprite
    if gravity = 0
        sprite_index = scr_mariowalk()

    //Otherwise
    else
    {

        //Use the jump sprite
        sprite_index = scr_mariojump()

        //Use the correct image index
        image_index = 0

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_incastle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter the goal castle

//If goal Mario walked far enough
if x &gt; other.x
and ready = 2
and gravity = 0
{

    //Snap to the castle's door
    x = other.x

    //In castle state
    ready = 4

    //Begin countdown state
    event_user(15)

    //Stop moving
    hspeed = 0

    //Fade into the castle
    alarm[1] = 10

    //Use the warp sprite
    sprite_index = scr_mariowarp()

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flagpole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Mario reaches the bottom of the flagpole
if ready = 0
and y &gt; other.y+128
{

    //Stop moving
    vspeed = 0

    //Snap to bottom of the flagpole
    y = other.y+128

    //Ready to jump state
    ready = 1

    //Move left 3 pixels
    x -= 3

    //Face left
    image_xscale = -1

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin countdown state

//Start the countdown if there is a time limit
if global.timer &gt; 0
    alarm[2] = 1
else
    alarm[3] = 1

//Do not animate
image_speed = 0

//Use the correct image index
image_index = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
